{"ast":null,"code":"var _jsxFileName = \"/Users/grigore/Github/booking/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomContext = /*#__PURE__*/React.createContext(); //new we have access to provider and consumer\n\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minprice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      brakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = e => {\n      const target = e.target;\n      const name = e.target.name;\n      const value = e.type === \"checkbox\" ? target.checked : target.value;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breackfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; // transforming the values we geting as string from capacity filtering into an number\n\n      capacity = parseInt(capacity); //filtering by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filtering by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filtering by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //fillter size\n\n      tempRooms = temprooms.filter(room => room.size >= minSize && room.size <= maxSize); //filltering breakfast\n\n      if (breakfast === true) {\n        tempRooms = tempRooms;\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  //getdata fn\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    console.log(rooms);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(RoomConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/grigore/Github/booking/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minprice","maxPrice","minSize","maxSize","brakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","e","target","name","value","checked","setState","filterRooms","breackfast","parseInt","filter","temprooms","size","breakfast","componentDidMount","formatData","console","log","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport items from \"./data\";\n\nconst RoomContext = React.createContext();\n//new we have access to provider and consumer\n\nexport default class RoomProvider extends Component {\n  state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: \"all\",\n    capacity: 1,\n    price: 0,\n    minprice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    brakfast: false,\n    pets: false,\n  };\n  //getdata fn\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    console.log(rooms);\n    let featuredRooms = rooms.filter((room) => room.featured === true);\n    let maxPrice = Math.max(...rooms.map((item) => item.price));\n    let maxSize = Math.max(...rooms.map((item) => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize,\n    });\n  }\n  formatData(items) {\n    let tempItems = items.map((item) => {\n      let id = item.sys.id;\n      let images = item.fields.images.map((image) => image.fields.file.url);\n      let room = {\n        ...item.fields,\n        images,\n        id,\n      };\n      return room;\n    });\n    return tempItems;\n  }\n  getRoom = (slug) => {\n    let tempRooms = [...this.state.rooms];\n    const room = tempRooms.find((room) => room.slug === slug);\n    return room;\n  };\n\n  handleChange = (e) => {\n    const target = e.target;\n    const name = e.target.name;\n    const value = e.type === \"checkbox\" ? target.checked : target.value;\n    this.setState(\n      {\n        [name]: value,\n      },\n      this.filterRooms\n    );\n  };\n  filterRooms = () => {\n    let { rooms, type, capacity, price, minSize, maxSize, breackfast, pets } =\n      this.state;\n    let tempRooms = [...rooms];\n    // transforming the values we geting as string from capacity filtering into an number\n    capacity = parseInt(capacity);\n\n    //filtering by type\n    if (type !== \"all\") {\n      tempRooms = tempRooms.filter((room) => room.type === type);\n    }\n\n    //filtering by capacity\n    if (capacity !== 1) {\n      tempRooms = tempRooms.filter((room) => room.capacity >= capacity);\n    }\n//filtering by price\ntempRooms = tempRooms.filter(room => room.price <= price)\n//fillter size\ntempRooms = temprooms.filter(room => room.size >= minSize && room.size <= maxSize)\n//filltering breakfast\nif(breakfast === true) {\n  tempRooms = tempRooms\n}\n    this.setState({\n      sortedRooms: tempRooms,\n    });\n  };\n  render() {\n    return (\n      <RoomContext.Provider\n        value={{\n          ...this.state,\n          getRoom: this.getRoom,\n          handleChange: this.handleChange,\n        }}\n      >\n        {this.props.children}\n      </RoomContext.Provider>\n    );\n  }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return (\n      <RoomConsumer>\n        {(value) => <Component {...props} context={value} />}\n      </RoomConsumer>\n    );\n  };\n}\n\nexport { RoomProvider, RoomConsumer, RoomContext };\n"]},"metadata":{},"sourceType":"module"}