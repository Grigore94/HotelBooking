{"ast":null,"code":"var _jsxFileName = \"/Users/grigore/Github/booking/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\";\nimport Client from \"./Contenful\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomContext = /*#__PURE__*/React.createContext(); //new we have access to provider and consumer\n\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minprice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"\"\n        });\n      } catch {}\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = e => {\n      const target = e.target;\n      const name = e.target.name;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; // transforming the values we geting as string from capacity filtering into an number\n\n      capacity = parseInt(capacity); //filtering by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filtering by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filtering by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //fillter size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filltering breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filtering pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    console.log(rooms);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(RoomConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/grigore/Github/booking/src/context.js"],"names":["React","Component","items","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minprice","maxPrice","minSize","maxSize","breakfast","pets","getData","response","getEntries","content_type","getRoom","slug","tempRooms","room","find","handleChange","e","target","name","value","checked","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","console","log","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport items from \"./data\";\nimport Client from \"./Contenful\";\n\n\n\nconst RoomContext = React.createContext();\n//new we have access to provider and consumer\n\nexport default class RoomProvider extends Component {\n  state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: \"all\",\n    capacity: 1,\n    price: 0,\n    minprice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    breakfast: false,\n    pets: false,\n  };\n  //get data fn\n\n  getData = async () => {\ntry {\nlet response = await Client.getEntries({\ncontent_type : \"\"\n})\n}catch{\n\n}\n  }\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    console.log(rooms);\n    let featuredRooms = rooms.filter((room) => room.featured === true);\n    let maxPrice = Math.max(...rooms.map((item) => item.price));\n    let maxSize = Math.max(...rooms.map((item) => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize,\n    });\n  }\n  formatData(items) {\n    let tempItems = items.map((item) => {\n      let id = item.sys.id;\n      let images = item.fields.images.map((image) => image.fields.file.url);\n      let room = {\n        ...item.fields,\n        images,\n        id,\n      };\n      return room;\n    });\n    return tempItems;\n  }\n  getRoom = (slug) => {\n    let tempRooms = [...this.state.rooms];\n    const room = tempRooms.find((room) => room.slug === slug);\n    return room;\n  };\n\n  handleChange = (e) => {\n    const target = e.target;\n    const name = e.target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState(\n      {\n        [name]: value,\n      },\n      this.filterRooms\n    );\n  };\n  filterRooms = () => {\n    let { rooms, type, capacity, price, minSize, maxSize, breakfast, pets } =\n      this.state;\n    let tempRooms = [...rooms];\n    // transforming the values we geting as string from capacity filtering into an number\n    capacity = parseInt(capacity);\n\n    //filtering by type\n    if (type !== \"all\") {\n      tempRooms = tempRooms.filter((room) => room.type === type);\n    }\n\n    //filtering by capacity\n    if (capacity !== 1) {\n      tempRooms = tempRooms.filter((room) => room.capacity >= capacity);\n    }\n    //filtering by price\n    tempRooms = tempRooms.filter((room) => room.price <= price);\n    //fillter size\n    tempRooms = tempRooms.filter(\n      (room) => room.size >= minSize && room.size <= maxSize\n    );\n    //filltering breakfast\n    if (breakfast) {\n      tempRooms = tempRooms.filter((room) => room.breakfast === true);\n    }\n    //filtering pets\n    if (pets) {\n      tempRooms = tempRooms.filter((room) => room.pets === true);\n    }\n    this.setState({\n      sortedRooms: tempRooms,\n    });\n  };\n  render() {\n    return (\n      <RoomContext.Provider\n        value={{\n          ...this.state,\n          getRoom: this.getRoom,\n          handleChange: this.handleChange,\n        }}\n      >\n        {this.props.children}\n      </RoomContext.Provider>\n    );\n  }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return (\n      <RoomConsumer>\n        {(value) => <Component {...props} context={value} />}\n      </RoomConsumer>\n    );\n  };\n}\n\nexport { RoomProvider, RoomConsumer, RoomContext };\n"]},"metadata":{},"sourceType":"module"}